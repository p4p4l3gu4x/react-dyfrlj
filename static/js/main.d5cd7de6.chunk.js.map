{"version":3,"sources":["login.svg","components/login/Login.tsx","components/login/Register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Login","props","className","ref","this","containerRef","src","loginImg","htmlFor","type","name","placeholder","React","Component","Register","App","current","rightSide","state","isLogginActive","classList","add","remove","setState","prevState","onClick","changeState","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,mC,8OCO9BC,EAAb,YACI,WAAYC,GAAY,qEACdA,IAFd,sEAMQ,OACI,yBAAKC,UAAU,iBAAiBC,IAAKC,KAAKH,MAAMI,cAC5C,yBAAKH,UAAU,UAAf,SACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKI,IAAKC,OAEd,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOM,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,cAEnD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,gBAI3D,yBAAKT,UAAU,UACX,4BAAQA,UAAU,OAAlB,eAzBpB,GAA2BU,IAAMC,WCApBC,EAAb,YACI,WAAYb,GAAY,qEACdA,IAFd,sEAMQ,OACI,yBAAKC,UAAU,iBAAiBC,IAAKC,KAAKH,MAAMI,cAC5C,yBAAKH,UAAU,UAAf,YACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKI,IAAKC,OAEd,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOM,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,cAEnD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,WAEhD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,gBAI3D,yBAAKT,UAAU,UACX,4BAAQA,UAAU,OAAlB,kBA7BpB,GAA8BU,IAAMC,WCE9BE,E,YAEF,WAAYd,GAAY,IAAD,8BACnB,4CAAMA,KAKVe,aANuB,IAOvBC,eAPuB,EAEnB,EAAKC,MAAQ,CACTC,gBAAgB,GAHD,E,iFAUnBf,KAAKa,UAAUG,UAAUC,IAAI,W,oCAGnB,IACFF,EAAmBf,KAAKc,MAAxBC,eACLA,GACCf,KAAKa,UAAUG,UAAUE,OAAO,SAChClB,KAAKa,UAAUG,UAAUC,IAAI,UAE7BjB,KAAKa,UAAUG,UAAUC,IAAI,SAC7BjB,KAAKa,UAAUG,UAAUE,OAAO,SAEpClB,KAAKmB,UAAS,SAACC,GAAD,MAAgB,CAAEL,gBAAiBA,Q,+BAG5C,IAAD,OACIA,EAAmBf,KAAKc,MAAxBC,eACFH,EAAUG,EAAiB,WAAa,QAE9C,OACI,yBAAKjB,UAAU,OACf,yBAAKA,UAAU,SACX,yBAAKA,UAAU,aACTiB,GAAkB,kBAAC,EAAD,CAAOd,aAAc,SAACF,GAAD,OAAc,EAAKa,QAAUb,MACnEgB,GAAkB,kBAAC,EAAD,CAAUd,aAAc,SAACF,GAAD,OAAc,EAAKa,QAAUb,MAE9E,kBAAC,EAAD,CACIa,QAASA,EACTX,aAAc,SAACF,GAAD,OAAc,EAAKc,UAAYd,GAC7CsB,QAAS,kBAAM,EAAKC,YAAYC,KAAK,Y,GAzCvCf,IAAMC,WAgDlBe,EAAY,SAAC3B,GACf,OACI,yBAAKC,UAAU,aAAaC,IAAKF,EAAMI,aAAcoB,QAASxB,EAAMwB,WAChE,yBAAKvB,UAAU,mBACX,yBAAKA,UAAU,QACVD,EAAMe,YAQZD,IC1DKc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5cd7de6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.9a76e74e.svg\";","import React from 'react';\nimport loginImg from '../../login.svg';\n\ntype MyProps = {\n    containerRef:any\n}\ntype MyState = {}\nexport class Login extends React.Component<MyProps, MyState>{\n    constructor(props:any) {\n        super(props);\n    }\n\n    render(){\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className=\"header\">Login</div>\n                <div className=\"content\">\n                    <div className=\"image\">\n                        <img src={loginImg}/>\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">User Name</label>\n                            <input type=\"text\" name=\"username\" placeholder=\"username\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"text\" name=\"password\" placeholder=\"password\"/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer\">\n                    <button className=\"btn\">Login</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport loginImg from '../../login.svg';\n\ntype MyProps = {\n    containerRef:any\n}\ntype MyState = {}\nexport class Register extends React.Component<MyProps, MyState>{\n    constructor(props:any) {\n        super(props);\n    }\n\n    render(){\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className=\"header\">Register</div>\n                <div className=\"content\">\n                    <div className=\"image\">\n                        <img src={loginImg}/>\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">User Name</label>\n                            <input type=\"text\" name=\"username\" placeholder=\"username\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input type=\"text\" name=\"email\" placeholder=\"email\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"text\" name=\"password\" placeholder=\"password\"/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer\">\n                    <button className=\"btn\">Register</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.scss';\nimport { Login, Register } from './components/login';\n\n\ntype MyProps = {}\ntype MyState = {\n    isLogginActive: boolean\n}\nclass App extends React.Component<MyProps, MyState>{\n\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            isLogginActive: true,\n        }\n    }\n    current: any;\n    rightSide: any;\n\n    componentDidMount(): void {\n        this.rightSide.classList.add(\"right\");\n    }\n\n    changeState(){\n        const { isLogginActive } = this.state;\n        if(isLogginActive){\n            this.rightSide.classList.remove(\"right\");\n            this.rightSide.classList.add(\"left\");\n        }else{\n            this.rightSide.classList.add(\"right\");\n            this.rightSide.classList.remove(\"left\");\n        }\n        this.setState((prevState) => ({ isLogginActive: !isLogginActive }));\n    }\n\n    render(){\n        const { isLogginActive } = this.state;\n        const current = isLogginActive ? \"Register\" : \"Login\";\n        const currentActive = isLogginActive ? \"register\" : \"login\";\n        return (\n            <div className=\"App\">\n            <div className=\"login\">\n                <div className=\"container\">\n                    { isLogginActive && <Login containerRef={(ref: any) => this.current = ref}/>}\n                    { !isLogginActive && <Register containerRef={(ref: any) => this.current = ref}/>}\n                </div>\n                <RightSide\n                    current={current}\n                    containerRef={(ref: any) => this.rightSide = ref}\n                    onClick={() => this.changeState.bind(this)}/>\n            </div>\n        </div>\n        );\n    }\n}\n\nconst RightSide = (props: any) => {\n    return (\n        <div className=\"right-side\" ref={props.containerRef} onClick={props.onClick()}>\n            <div className=\"inner-container\">\n                <div className=\"text\">\n                    {props.current}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}